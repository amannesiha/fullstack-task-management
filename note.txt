- create the database in pg admin
    right click on "database" then create a database name "mytaskdb"
    create a table , click on the database created before and use a query tool to create the database
        CREATE TABLE tasks (
            id SERIAL PRIMARY KEY,
            title VARCHAR(255) NOT NULL,
            completed BOOLEAN DEFAULT FALSE
        );
    Insert some data into the table
        INSERT INTO tasks (title, completed) VALUES
        ('Set up PostgreSQL database', TRUE),
        ('Develop Node.js backend with Express', FALSE),
        ('Integrate frontend with API', FALSE);
- go to backend folder and run the command "npm init -y", thiss initialize the package.json file
- Install dependencies: "npm install express pg cors"
        express: The web framework for creating API endpoints.
        pg: The non-blocking PostgreSQL client for Node.js.
        cors: Middleware to enable Cross-Origin Resource Sharing, allowing your frontend (on a different port) to access the backend.
- create backedn db.js file and put all postgre crediintials and the connection parameters
- create server.js file, this is (express API)
    This file will define your API endpoints and use db.js to interact with PostgreSQL
- Run the Backend: Navigate to the backend directory in your terminal and run:
    node server.js
    You should see: Backend server running on http://localhost:3001
- Run the frontend: open index.html file in a browser
- Testing with Postman
    Now that your backend is running (node server.js in the backend folder) and connected to PostgreSQL, 
    you can use Postman to test the API endpoints directly.
    Remember: Your backend is running on http://localhost:3001